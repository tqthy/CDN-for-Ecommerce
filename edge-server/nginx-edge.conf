worker_processes auto;

# Enables the use of JIT for regular expressions to speed-up their processing.
pcre_jit on;

events {
    worker_connections 1024;
}


http {
    # Use Docker's internal DNS resolver
    resolver 127.0.0.11 valid=30s; 

    include       mime.types;
    default_type  application/octet-stream;

    error_log /logs/error.log debug;
    log_format cache_status '$remote_addr - $upstream_cache_status [$time_local] "$request" '
                        'cache_key=$cache_key response_time=$request_time';
    access_log /logs/cache.log cache_status;
    
    include generic_conf/setup_cache.conf;

    proxy_temp_path     /var/run/openresty/nginx-proxy;
    fastcgi_temp_path   /var/run/openresty/nginx-fastcgi;
    uwsgi_temp_path     /var/run/openresty/nginx-uwsgi;
    scgi_temp_path      /var/run/openresty/nginx-scgi;

    sendfile    on;

    keepalive_timeout   65;

    lua_shared_dict cdn_tasks 10m;

    init_worker_by_lua_block {
        local redis_subscribe = require "/usr/local/openresty/nginx/conf/lua/redis-subscribe";
        redis_subscribe.start()
    }

    include generic_conf/vts_setup.conf;

    upstream origin {
      server origin:3000;
    }
    upstream storage {
      server storage:9000;
    }

    server {
        listen 80;

        # Allow special characters in headers
        ignore_invalid_headers off;
        # Allow any size file to be uploaded.
        client_max_body_size 50m;

        include generic_conf/vts_location.conf;

        location /download {
            internal;
            include generic_conf/define_cache.conf;
            set $cache_key "";
            if ($uri ~ /download/[^/]+/(.+)$) {
                set $cache_key $1;
            }

            # Use the extracted key as the cache key
            proxy_cache_key $cache_key;

            # Rewrite the URI to the new endpoint
            rewrite ^/download/[^/]+/(.*)$ /api/file/download/$1 break;

            proxy_pass http://origin; 
            add_header X-Edge Server;            
            add_header X-Cache-Key $cache_key;
        }


        # Endpoint to process queued tasks
        location /process-cache {
            content_by_lua_block {
                local process_cache = require "/usr/local/openresty/nginx/conf/lua/process-cache";
                process_cache.start()
            }
        }

        location /api/file/upload {
            proxy_pass http://origin;
        }

        location ~ /api/file/purge/(.+)$ {
            add_header X-Edge Server;
            proxy_pass http://origin;
        }

        location ~ ^/api/file/download/([^/]+\.[a-zA-Z0-9]+)$ {
            include generic_conf/define_cache.conf;
            set $cache_key "";
            if ($uri ~ /([^/]+)$) {
                set $cache_key $1;
            }
            proxy_cache_key $cache_key;
        
            # include generic_conf/proxy_s3.conf;
            # proxy_pass http://storage/test1/$1;
            proxy_pass http://origin;
            add_header X-Edge Server;
            add_header X-Cache-Key $cache_key;
        }


        location ~ /purge/(.+)$ {
            internal;
            allow all; 
            add_header X-Edge Server;          
            proxy_cache_key $1;
            proxy_cache_purge zone_1 $1; 
        }

        location / {
            return 200;
        }


        
    }
    # include generic_conf/vts_setup.conf;
    # js_path "njs/";
    # js_import example from example.js;
}